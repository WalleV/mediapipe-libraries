name: Package

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
      packageName:
        type: string
        default: package
      bazelBuildArgs:
        type: string
        default: '--experimental_scale_timeouts=10.0 --http_timeout_scaling=10.0'
      linuxBuildArgs:
        type: string
        default: '--desktop gpu --opencv cmake'
      androidBuildArgs:
        type: string
        default: '--android arm64 --android_ndk_api_level 21'
      macosBuildArgs:
        type: string
        default: '--desktop cpu --opencv cmake --macos_universal'
      iosBuildArgs:
        type: string
        default: '--ios arm64'
      windowsBuildArgs:
        type: string
        default: '--desktop cpu --opencv cmake'
    secrets:
      UNITY_EMAIL:
        required: false
      UNITY_PASSWORD:
        required: false
      UNITY_TOTP_KEY:
        required: false

  release:
    types: [created]

jobs:
  print-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print inputs for debug
        run: |
          echo 'inputs.ref=${{ inputs.ref }}'
          echo 'inputs.bazelBuildArgs=${{ inputs.bazelBuildArgs }}'
          echo 'inputs.linuxBuildArgs=${{ inputs.linuxBuildArgs }}'
          echo 'inputs.androidBuildArgs=${{ inputs.androidBuildArgs }}'
          echo 'inputs.macosBuildArgs=${{ inputs.macosBuildArgs }}'
          echo 'inputs.iosBuildArgs=${{ inputs.iosBuildArgs }}'
          echo 'inputs.windowsBuildArgs=${{ inputs.windowsBuildArgs }}'

  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        run: |
          docker build --no-cache --build-arg UID=$(id -u) -t mediapipe_unity:latest . -f docker/linux/x86_64/Dockerfile

      - name: Remove unused files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android

      - name: Build
        run: |
          docker run --rm \
            --mount type=bind,src=$PWD/Packages,dst=/home/mediapipe/Packages \
            mediapipe_unity:latest \
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.linuxBuildArgs }} -vv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
          path: .

  android-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        run: |
          docker build --no-cache --build-arg UID=$(id -u) -t mediapipe_unity:latest . -f docker/linux/x86_64/Dockerfile

      - name: Remove unused files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android

      - name: Build
        run: |
          docker run --rm \
            --mount type=bind,src=$PWD/Packages,dst=/home/mediapipe/Packages \
            mediapipe_unity:latest \
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.androidBuildArgs }} -vv

      - name: Upload mediapipe_android.aar
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_android.aar
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/Android/mediapipe_android.aar

  macos-build:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install NumPy
        run: pip install --no-cache-dir --user numpy

      - name: Build libmediapipe_c.dylib
        run: |
          unset ANDROID_NDK_HOME
          python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.macosBuildArgs }} -vv

      - name: Upload libmediapipe_c.dylib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-libmediapipe_c.dylib
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/libmediapipe_c.dylib

  ios-build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install NumPy
        run: pip install --no-cache-dir --user numpy

      - name: Build MediaPipeUnity.framework
        run: |
          unset ANDROID_NDK_HOME
          sed -i -e 's/PLEASE_SET_YOUR_BUNDLE_ID_HERE/com.github.homuler.mediapipe.unity/g' mediapipe_api/objc/BUILD
          python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.iosBuildArgs }} -vv

      - name: Upload MediaPipeUnity.framework
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-MediaPipeUnity.framework
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/iOS/MediaPipeUnity.framework

  windows-build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        run: |
          docker build --no-cache -t mediapipe_unity:latest . -f docker/windows/x86_64/Dockerfile
        shell: cmd
        timeout-minutes: 60

      - name: Build
        run: |
          docker run --rm --cpus=2 --memory=8g ^
            --mount type=bind,src=%CD%\Packages,dst=C:\mediapipe\Packages ^
            mediapipe_unity:latest ^
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.windowsBuildArgs }} -vv
        shell: cmd

      - name: Upload mediapipe_c.dll
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_c.dll
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/mediapipe_c.dll

  clean:
    runs-on: ubuntu-latest
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_android.aar
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-libmediapipe_c.dylib
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-MediaPipeUnity.framework
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_c.dll
          failOnError: false

  publish:
    needs: [linux-build, android-build, macos-build, ios-build, windows-build]
    runs-on: ubuntu-latest
    steps:
      # 下载所有制品
      - name: Download mediapipe_android.aar
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_android.aar
          
      - name: Download libmediapipe_c.dylib
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-libmediapipe_c.dylib

      - name: Download MediaPipeUnity.framework
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-MediaPipeUnity.framework

      - name: Download mediapipe_c.dll
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_c.dll

      # 上传到 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ inputs.packageName }}-mediapipe_android.aar
            ${{ inputs.packageName }}-libmediapipe_c.dylib
            ${{ inputs.packageName }}-MediaPipeUnity.framework
            ${{ inputs.packageName }}-mediapipe_c.dll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 清理制品
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
          failOnError: false
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_android.aar
          failOnError: false
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-libmediapipe_c.dylib
          failOnError: false
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-MediaPipeUnity.framework
          failOnError: false
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-mediapipe_c.dll
          failOnError: false